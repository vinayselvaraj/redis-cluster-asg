{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Redis 3.x Cluster with AutoScaling",
  
  "Parameters" : {

    "VPCSubnets" : {
      "Description" : "Subnets to launch EC2 instances in",
      "Type" : "List<AWS::EC2::Subnet::Id>"
    },
    
    "EC2SecurityGroup" : {
      "Description" : "Security Group for EC2 instances",
      "Type" : "AWS::EC2::SecurityGroup::Id"
    },
    
    "KeyName" : {
      "Description" : "SSH Key Pair Name",
      "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    
    "EC2InstanceType" : {
      "Description" : "EC2 Instance Type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : ["t2.micro", "t2.small", "t2.medium", "t2.large"]
    },
    
    "ClusterMinSize" : {
      "Description" : "Minimum # of EC2 hosts in the Redis Cluster",
      "Type" : "Number",
      "Default" : "9"
    },
    
    "ClusterMaxSize" : {
      "Description" : "Maximum # of EC2 hosts in the Redis Cluster",
      "Type" : "Number",
      "Default" : "9"
    },
    
    "NumReplicas" : {
      "Description" : "Number of replicas per master",
      "Type" : "Number",
      "Default" : "2"
    },
    
    "RedisPort" : {
      "Description" : "RedisPort",
      "Type" : "Number",
      "Default" : "6379"
    }
    
  },
  
  "Mappings" : {
    "RegionAMIMap" : {
      "us-east-1"      : { "AMI" : "ami-08111162" },
      "us-west-2"      : { "AMI" : "ami-c229c0a2" },
      "us-west-1"      : { "AMI" : "ami-1b0f7d7b" },
      "eu-west-1"      : { "AMI" : "ami-31328842" },
      "eu-central-1"   : { "AMI" : "ami-e2df388d" },
      "ap-southeast-1" : { "AMI" : "ami-e90dc68a" },
      "ap-northeast-2" : { "AMI" : "ami-6598510b" },
      "ap-northeast-1" : { "AMI" : "ami-f80e0596" },
      "ap-southeast-2" : { "AMI" : "ami-f2210191" },
      "sa-east-1"      : { "AMI" : "ami-1e159872" }
    }
  },
  
  "Resources" : {
    
    "InstanceIdToIPTable" : {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
        "KeySchema" : [
          {
            "AttributeName" : "instance_id",
            "KeyType" : "HASH"
          }
        ],
        "AttributeDefinitions" : [
          {
            "AttributeName" : "instance_id",
            "AttributeType" : "S"
          }
        ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : "1",
          "WriteCapacityUnits" : "1"
        }
      }
    },
    
    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "services" : {
              "sysvinit" : {
                "redis" : {
                  "enabled" : "true",
                  "ensureRunning" : "true"
                }
              }
            },
            "packages" : {
              "rubygems" : {
                "redis" : []
              }
            },
            "files" : {
              "/usr/local/bin/redis-trib.rb" : {
                "source" : "http://download.redis.io/redis-stable/src/redis-trib.rb",
                "mode"  : "000755",
                "owner" : "root",
                "group" : "root"
              },
              "/usr/local/bin/redis-asg-lc-agent.py" : {
                "source" : "https://raw.githubusercontent.com/vinayselvaraj/redis-cluster-asg/master/redis-asg-lc-agent.py",
                "mode"  : "000755",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cron.d/redis-asg-lc-agent" : {
                "content" : { "Fn::Join" : ["", [
                  "SHELL=/bin/bash\n",
                  "PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin\n",
                  "HOME=/\n",
                  "SQS_QUEUE_URL=", { "Ref" : "ASGLCQueue"}, "\n",
                  "AWS_REGION=", { "Ref" : "AWS::Region"}, "\n",
                  "INST_ID_TO_IP_TABLE=", { "Ref" : "InstanceIdToIPTable" }, "\n",
                  "* * * * * root sleep `/usr/bin/expr $RANDOM \\% 59` && /usr/local/bin/is_leader.sh && /usr/local/bin/redis-asg-lc-agent.py \n"
                ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_installRemiRepository" : {
                "command" : "rpm -Uvhf http://rpms.remirepo.net/enterprise/remi-release-6.rpm"
              },
              "02_installRedis3" : {
                "command" : "yum -y install redis --enablerepo remi"
              },
              "03_enableRedisCluster" : {
                "command" : "sed -i 's/# cluster-enabled yes/cluster-enabled yes/g' /etc/redis.conf"
              },
              "04_enableRedisClusterConfig" : {
                "command" : "sed -i 's/# cluster-config-file nodes-6379.conf/cluster-config-file nodes-6379.conf/g' /etc/redis.conf"
              },
              "05_enableRedisClusterNodeTimeout" : {
                "command" : "sed -i 's/# cluster-node-timeout 5000/cluster-node-timeout 5000/g' /etc/redis.conf"
              },
              "06_bindAllIPs" : {
                "command" : "sed -i 's/bind 127.0.0.1/#bind 127.0.0.1/g' /etc/redis.conf"
              },
              "07_installBoto3" : {
                "command" : "pip install boto3"
              }
            }
          }
        }
      },
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "AssociatePublicIpAddress" : "true",
        "IamInstanceProfile" : { "Ref" : "EC2InstProfile" },
        "ImageId" : {
          "Fn::FindInMap" : [
            "RegionAMIMap",
            { "Ref" : "AWS::Region" },
            "AMI"
          ]
        },
        "InstanceType" : { "Ref" : "EC2InstanceType" },
        "SecurityGroups" : [ { "Ref" : "EC2SecurityGroup" } ],
        "UserData"        : {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "/opt/aws/bin/cfn-init --region ", 
                  { "Ref": "AWS::Region"}, 
                  " -s ", { "Ref" : "AWS::StackName" }, 
                  " -r LaunchConfig"
              ]
            ]
          }
        }
      }
    },
    
    "AutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "VPCZoneIdentifier" : { "Ref" : "VPCSubnets" },
        "MinSize" : {"Ref" : "ClusterMinSize"},
        "MaxSize" : {"Ref" : "ClusterMaxSize"},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" }, "PropagateAtLaunch" : "true" }
        ]
      },
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" : { "Ref" : "ClusterMinSize" },
          "MaxBatchSize" : "1"
        }
      }
    },
    
    "NotifyClusterCreateLambdaExecRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
              "Resource": "arn:aws:logs:*:*:*"
            },
            {
              "Effect": "Allow",
              "Action": ["sqs:SendMessage"],
              "Resource": "*"
            }]
          }
        }]
      }
    },
    
    "NotifyClusterCreateFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile":  { "Fn::Join": ["", [
            "var response = require('cfn-response');",
            "exports.handler = function(event, context) {",
            "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
            "    if (event.RequestType == 'Delete') {",
            "        response.send(event, context, response.SUCCESS);",
            "        return;",
            "    }",
            
            "    if (event.RequestType == 'Create') {",
            "      var sqsQueueUrl = event.ResourceProperties.SQSQueue;",
            "      var responseData = {};",
            "      if (sqsQueueUrl) {",
            "        var aws = require('aws-sdk');",
            "        var sqs = new aws.SQS({params: {QueueUrl: sqsQueueUrl}});",
            "        var messageBody = {Event: 'CLUSTER_CREATE', RedisPort: '", {"Ref" : "RedisPort"} ,"', NumReplicas: '", {"Ref" : "NumReplicas"} ,"', AutoScalingGroupName: '", {"Ref" : "AutoScalingGroup"} ,"'};",
            "        sqs.sendMessage({MessageBody: JSON.stringify(messageBody)}, function (err, data) {",
            "          if (err) {",
            "            responseData = {Error: 'sendMessage call failed'};",
            "            console.log(responseData.Error + ':\\n', err);",
            "            response.send(event, context, response.FAILED, responseData);",
            "          } else { ",
            "            responseData = {Message: 'sendMessage call succeeded'};",
            "            response.send(event, context, response.SUCCESS, responseData);",
            "          }",
            "        });",
            "      } else {",
            "        responseData = {Error: 'SQS queue url not specified'};",
            "        console.log(responseData.Error);",
            "        response.send(event, context, response.FAILED, responseData);",
            "      }",
            "    }",
            "};"
          ]]}
        },
        "Handler": "index.handler",
        "Runtime": "nodejs",
        "Timeout": "30",
        "Role": { "Fn::GetAtt" : ["NotifyClusterCreateLambdaExecRole", "Arn"] }
      }
    },
    
    "NotifyClusterCreateCustomResource" : {
      "Type": "Custom::NotifyClusterCreate",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["NotifyClusterCreateFunction", "Arn"] },
        "SQSQueue": { "Ref": "ASGLCQueue" }
      }
    },
    
    "ScaleDownLCPolicy" : {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties" : {
        "AutoScalingGroupName": { "Ref": "AutoScalingGroup" },
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "HeartbeatTimeout" : "60",
        "DefaultResult" : "CONTINUE",
        "NotificationTargetARN": { "Fn::GetAtt": [ "ASGLCQueue", "Arn" ] },
        "RoleARN": { "Fn::GetAtt": [ "ASGLCRole", "Arn" ] }
      }
    },
    
    "ScaleUpLCPolicy" : {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties" : {
        "AutoScalingGroupName": { "Ref": "AutoScalingGroup" },
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_LAUNCHING",
        "HeartbeatTimeout" : "60",
        "DefaultResult" : "CONTINUE",
        "NotificationTargetARN": { "Fn::GetAtt": [ "ASGLCQueue", "Arn" ] },
        "RoleARN": { "Fn::GetAtt": [ "ASGLCRole", "Arn" ] }
      }
    },
    
    "ASGLCQueue" : {
      "Type" : "AWS::SQS::Queue",
      "Properties" : {
        "VisibilityTimeout" : "60"
      }
    },
    
    "ASGLCRole" : {
      "Type": "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "autoscaling.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Policies" : [
          {
            "PolicyName" : "ASGLCPolicy",
            "PolicyDocument" : {
              "Version" : "2012-10-17",
              "Statement" : [
                {
                  "Effect" : "Allow",
                  "Action" : [
                    "sqs:SendMessage",
                    "sqs:GetQueueUrl"
                  ],
                  "Resource" : { "Fn::GetAtt": [ "ASGLCQueue", "Arn" ] }
                }
              ]
            }
          }
        ]
      }
    },
    
    "EC2IAMRole" : {
      "Type": "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [ {
            "Effect" : "Allow",
            "Principal" : {
              "Service" : [ "ec2.amazonaws.com" ]
            },
            "Action" : [ "sts:AssumeRole" ]
          }]
        },
        
        "Path" : "/",
        
        "Policies" : [ {
          "PolicyName" : "ControllerPolicy",
          "PolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement" : [
              {
                "Effect":"Allow",
                "Action":[
                  "ecs:CreateCluster",
                  "ecs:DeregisterContainerInstance",
                  "ecs:DiscoverPollEndpoint",
                  "ecs:Poll",
                  "ecs:RegisterContainerInstance",
                  "ecs:StartTelemetrySession",
                  "ecs:DescribeServices",
                  "ecs:UpdateService",
                  "ecs:Submit*",
                  "ecr:GetAuthorizationToken",
                  "ecr:BatchCheckLayerAvailability",
                  "ecr:GetDownloadUrlForLayer",
                  "ecr:BatchGetImage"
                ],
                "Resource":"*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "sqs:ReceiveMessage",
                  "sqs:DeleteMessage"
                ],
                "Resource": { "Fn::GetAtt" : ["ASGLCQueue", "Arn"] }
              },
              {
                "Effect": "Allow",
                "Action": ["ec2:DescribeInstances"],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": ["autoscaling:DescribeAutoScalingGroups"],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": ["dynamodb:*"],
                "Resource": { "Fn::Join" : [ "", [ 
                  "arn:aws:dynamodb:", 
                  { "Ref" : "AWS::Region" }, 
                  ":", 
                  { "Ref" : "AWS::AccountId"},
                  ":table/",
                  { "Ref" : "InstanceIdToIPTable"}
                  ]]}
              },
              {
                "Effect":"Deny",
                "Action":"iam:*",
                "Resource":"*"
              }
            ]
          }
        }]
      }
    },
    
    "EC2InstProfile" : {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [ { "Ref" : "EC2IAMRole" } ]
      }
    }
    
  }
  
}
  